import Head from "next/head";
import { useState } from "react";
import { useFormik } from "formik";
import * as Yup from "yup";
import { IoCaretBack } from "react-icons/io5";
import { BiLogIn } from "react-icons/bi";
// import { PiSignInFill } from "react-icons/pi";
import { IoIosPlay } from "react-icons/io";
import Cookies from "js-cookie";
import { useRouter } from "next/router";

//components
import InputFields from "./controls/InputFields";
import Buttons from "./controls/Buttons";
import Forms from "./controls/Forms";
import FormikErrorMessage from "./controls/FormikErrorMessage";
import axios from "../axios"

export default function Home() {
  //usestate
  const [password, setPassword] = useState(false);
  const [email, setEmail] = useState("");
  const [loading, setLoading] = useState(false);
  const [showPwd, setShowPwd] = useState(false);
  const [errorMessage, seterrorMessage] = useState("");
  const router = useRouter();

  //Formik InitialValue
  const initialvalue = {
    // email: "",
    password: "",
    // mobile: "",
  };
  //formik validation
  const formik = useFormik({
    enableReinitialize: true,
    initialValues: initialvalue,
    validationSchema: Yup.object().shape({
      // email: Yup.string().required("Enter Email"),
      password: Yup.string().required("Enter password"),
      // mobile: Yup.string().required("Enter Mobile"),
    }),
    onSubmit: (values) => {
      setLoading(true);
      const data = {
        username: email,
        password: values.password,
        // mobile:values.mobile
      };
      console.log(data);
      axios
        .post("/user/login", data)
        .then((res) => {
          setLoading(false);
          console.log(res.data)
          // Cookies.set("UserData", res.data.adminRegistartion.name);
          // router.push("/home");
        })
        .catch((error) => {
          if (error.response) {
            setLoading(false);
            seterrorMessage(error.response.data.message);
          }
        });
    },
  });
  const validateemail = () => {
    console.log(password);
    if (email != "") {
      setPassword(true);
    } else {
      seterrorMessage("Enter Email or Phone");
    }
  };
  return (
    <>
      <Head>
        <title>CRM - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="">
        <h1 className="flex justify-center text-2xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white py-5">
          Pharmarack CMS
        </h1>
        <div className="flex flex-col items-center  mx-auto lg:py-0">
          <div className="w-full bg-gray-100 rounded shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
            <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
              <div className="flex flex-col items-center justify-center">
                <img src="/pharmarack.png" className="w-16 h-12 " />
                <h1 className="mt-2 text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                  Sign in
                </h1>
                <h1 className="">to continue</h1>
                {errorMessage && (
                  <div className="pb-5 text-red-500">{errorMessage}</div>
                )}
              </div>
              <Forms
                className="space-y-4 md:space-y-6"
                onSubmit={formik.handleSubmit}
              >
                {password ? (
                  <div>
                    <InputFields
                      type="password"
                      name="password"
                      autoComplete="current-password"
                      value={formik.values.password}
                      onChange={(e) => {
                        formik.handleChange(e);
                      }}
                      onBlur={formik.handleBlur}
                      className="input-primary"
                      placeholder="Enter Password"
                    />
                    {formik.touched.password && formik.errors.password ? (
                      <FormikErrorMessage>
                        {formik.errors.password}
                      </FormikErrorMessage>
                    ) : null}
                  </div>
                ) : (
                  <div>
                    <InputFields
                      type="email"
                      id="email"
                      // name="email"
                      autoComplete="on"
                      value={formik.values.email}
                      onChange={(e) => {
                        formik.handleChange(e);
                        seterrorMessage("");
                        setEmail(e.target.value);
                      }}
                      onBlur={formik.handleBlur}
                      className={
                        formik.touched.email && formik.errors.email
                          ? "input-primary ring-2 ring-secondary border-none"
                          : "input-primary"
                      }
                      placeholder="Email or Phone"
                    />
                    {formik.touched.email && formik.errors.email ? (
                      <FormikErrorMessage>
                        {formik.errors.email}
                      </FormikErrorMessage>
                    ) : null}
                  </div>
                )}
                <div className="flex items-center justify-center">
                  <a
                    href="#"
                    className="text-sm font-medium text-primary-600 hover:underline dark:text-primary-500 text-gray-400"
                  >
                    Forgot password
                  </a>
                </div>
                {password ? (
                  <div className="flex gap-5">
                    <Buttons
                      onClick={() => setPassword(!password)}
                      type="submit"
                      className="w-full flex gap-1 justify-center items-center text-white bg-gray-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
                    >
                      <IoCaretBack />
                      Back
                    </Buttons>
                    <Buttons
                      onClick={() => console.log("login")}
                      type="submit"
                      className="w-full flex gap-1 justify-center items-center text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
                    >
                      Sign in
                      <BiLogIn />
                      {/* <PiSignInFill /> */}
                    </Buttons>
                  </div>
                ) : (
                  <Buttons
                    onClick={() => validateemail()}
                    type="submit"
                    className="w-full flex gap-1 justify-center items-center text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
                  >
                    Next
                    <IoIosPlay />
                  </Buttons>
                )}
                <p className="text-sm font-light text-gray-500 dark:text-gray-400">
                  Donâ€™t have an account yet?{" "}
                  <a
                    href="#"
                    className="font-medium text-primary-600 hover:underline dark:text-primary-500"
                  >
                    Sign up
                  </a>
                </p>
              </Forms>
            </div>
          </div>
        </div>
      </section>
    </>
  );
}
